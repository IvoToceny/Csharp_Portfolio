@page "/Profile"

@rendermode RenderMode.InteractiveServer

@using System.Net.Http.Json
@using MarketCarsLibrary.Models
@using System.Security.Claims
@inject IHttpClientFactory factory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Buy> Logger

<PageTitle>Profile</PageTitle>

<NavLink href="MicrosoftIdentity/Account/EditProfile">
    <button>
        Edit Profile
    </button>
</NavLink>

<NavLink href="/AddCar">
    <button>
        Add new car
    </button>
</NavLink>

<h3>Profile</h3>

@if (userClaims == null || cars == null)
{
<h4>Loading your cars...</h4>
}
else
{
    foreach(Claim claim in userClaims)
    {
        <h3>@claim.Value</h3>
    }
    foreach (CarsModel car in cars)
    {
        <h5>@car.Name</h5>
    }
    
}

@code {
    private HttpClient? client;
    private List<CarsModel>? cars;
    private IEnumerable<Claim>? userClaims;

    private void EditProfile()
    {
        NavigationManager.NavigateTo("MicrosoftIdentity/Account/EditProfile");
    }

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(5000);
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Access user claims
            userClaims = user.Claims;

            int id = 2;

            client = factory.CreateClient("api");
            cars = await client.GetFromJsonAsync<List<CarsModel>>($"Cars/{id}");
        }
        catch (Exception ex)
        {
            // Log the exception
            Logger.LogError(ex, "An error occurred during OnAfterRenderAsync");
            NavigationManager.NavigateTo("/Error");
        }
    }
}
